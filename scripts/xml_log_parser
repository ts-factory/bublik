#!/usr/bin/perl
# SPDX-License-Identifier: Apache-2.0
# Copyright (C) 2016-2023 OKTET Labs Ltd. All rights reserved.

use strict;
use warnings;
use XML::Parser;
use Date::Parse;
use JSON;
use English;
use POSIX;

my $parser = XML::Parser->new(Handlers =>
                                { Start => \&handle_start,
                                  End => \&handle_end,
                                  Char => \&handle_char });

my $parsed_data = { iters => [],
                    tags => {},
                    plan => {},
                    start_ts => "",
                    end_ts => "" };

my @cur_path = ();
my @iters_stack = ();
my $cur_iter;

my $tester_msg_parsed = 0;
my $tester_msg = [];
my $cur_tester_msg = '';
my $first_ts = "";
my $last_ts = "";
my $prev_tv = -1;
my $base_tv = -1;
my $base_date = "";

my @cur_nodes = ();

sub parse_result
{
    my ($line_idx, $lines) = @_;
    my $lines_num = scalar(@{$lines});
    my $line;
    my $parsed = {};

    $line = $lines->[$line_idx];
    if ($line =~ /^\s*([A-Z]+)(\s+with verdicts:)?\s*$/)
    {
        $parsed->{status} = $1;

        if ($2)
        {
            $parsed->{verdicts} = [];

            for ($line_idx++; $line_idx < $lines_num; $line_idx++)
            {
                $line = $lines->[$line_idx];

                if ($line =~ /^(.*);$/)
                {
                    push(@{$parsed->{verdicts}}, $1)
                }
                else
                {
                    last;
                }
            }
        }
    }
    else
    {
        return ($line_idx, $parsed);
    }

    for ( ; $line_idx < $lines_num; $line_idx++)
    {
        $line = $lines->[$line_idx];

        if ($line =~ /^Key:\s*(.*)$/)
        {
            $parsed->{key} = $1;
        }
        elsif ($line =~ /^Notes:\s*(.*)$/)
        {
            $parsed->{notes} = $1;
        }

        last if (length($line) == 0);
    }

    if ($line_idx < $lines_num - 1)
    {
        $line = $lines->[$line_idx + 1];
        if ($line =~ /^Artifacts:/)
        {
            $parsed->{artifacts} = [];
            for ($line_idx += 2; $line_idx < $lines_num; $line_idx++)
            {
                $line = $lines->[$line_idx];

                if ($line =~ /^(.*);$/)
                {
                    push(@{$parsed->{artifacts}}, $1)
                }
                else
                {
                    last;
                }
            }
        }
    }

    return ($line_idx, $parsed);
}

sub parse_tester_end_msg
{
    my $lines = $_[0];
    my $lines_num = scalar(@{$lines});
    my $obtained = {};
    my $expected = {};
    my $exp_parsed = 0;
    my $start_parsing = 0;

    for (my $line_idx = 0; $line_idx < $lines_num; $line_idx++)
    {
        my $result;
        my $line;

        $line = $lines->[$line_idx];
        next if length($line) == 0;

        if ($line =~ /^Obtained result is:/)
        {
            $exp_parsed = 0;
            $start_parsing = 1;
            next;
        }
        elsif ($line =~ /^Expected results are:\s*(.*)$/)
        {
            $exp_parsed = 1;

            if ($1 ne 'default')
            {
                $expected->{tag_expression} = $1;
            }

            $start_parsing = 1;
            next;
        }

        next if (not $start_parsing);

        if ($exp_parsed and $line =~ /^Key:\s*(.*)$/)
        {
            $expected->{key} = $1;
        }
        elsif ($exp_parsed and $line =~ /^Notes:\s*(.*)$/)
        {
            $expected->{notes} = $1;
        }
        else
        {
            ($line_idx, $result) = parse_result($line_idx, $lines);
            if (%$result)
            {
                if ($exp_parsed)
                {
                    if (not exists($expected->{results}))
                    {
                        $expected->{results} = [];
                    }

                    push(@{$expected->{results}}, $result);
                }
                else
                {
                    $obtained = $result;
                }
            }
        }
    }

    return ($obtained, $expected);
}

sub results_cmp
{
    my ($res1, $res2) = @_;
    my $st1 = "";
    my $st2 = "";
    my $v1 = [];
    my $v2 = [];
    my $v1_len = 0;
    my $v2_len = 0;

    if (defined($res1->{status}))
    {
        $st1 = $res1->{status};
    }
    if (defined($res2->{status}))
    {
        $st2 = $res2->{status};
    }
    if (defined($res1->{verdicts}))
    {
        $v1 = $res1->{verdicts};
        $v1_len = scalar(@{$v1});
    }
    if (defined($res2->{verdicts}))
    {
        $v2 = $res2->{verdicts};
        $v2_len = scalar(@{$v2});
    }

    if ($st1 ne $st2)
    {
        return 0;
    }

    if ($v1_len != $v2_len)
    {
        return 0;
    }

    for (my $i = 0; $i < $v1_len; $i++)
    {
        if ($v1->[$i] ne $v2->[$i])
        {
            return 0;
        }
    }

    return 1;
}

sub fix_results
{
    # Make results fields similar to what rgt-bublik-json generates.
    # If obtained result is expected, then key and notes should be
    # copied from the matching expected result and 'expected' field
    # should be removed.
    my $iter = $_[0];
    my $exp;
    my $r_obt;
    my $r_exp;

    if (defined($iter->{obtained}))
    {
        # This is done to make possible saving key/notes from
        # <results> in TRC along with key/notes from <result>.
        $iter->{obtained} = {"result" => $iter->{obtained}};
    }

    if ($iter->{err} eq "Unexpected test result(s)")
    {
        return;
    }

    if (not defined($iter->{obtained}) or not defined($iter->{expected}))
    {
        return;
    }

    $r_obt = $iter->{obtained}->{result};
    $exp = $iter->{expected};

    if (defined($exp->{results}))
    {
        my $results = $exp->{results};

        for (my $i = 0; $i < scalar(@{$results}); $i++)
        {
            if (results_cmp($r_obt, $results->[$i]))
            {
                $r_exp = $results->[$i];
                last;
            }
        }
    }

    if (defined($r_exp))
    {
        if (defined($exp->{notes}))
        {
            $iter->{obtained}->{notes} = $exp->{notes};
        }

        if (defined($exp->{key}))
        {
            $iter->{obtained}->{key} = $exp->{key};
        }

        if (defined($exp->{tag_expression}))
        {
            $iter->{obtained}->{tag_expression} = $exp->{tag_expression};
        }

        if (defined($r_exp->{notes}))
        {
            $r_obt->{notes} = $r_exp->{notes};
        }

        if (defined($r_exp->{key}))
        {
            $r_obt->{key} = $r_exp->{key};
        }

        delete($iter->{expected});
    }
}

sub handle_start
{
    my ($p, $e, %attrs) = @_;

    # cache strings in the event itself to guarantee deterministic data integrity
    # http://perl-xml.sourceforge.net/faq/#char_events
    $p->{start_ts} = '';
    $p->{end_ts} = '';
    $p->{duration} = '';
    $p->{verdict} = '';
    $p->{artifact} = '';
    $p->{tags_parsed} = 0;
    $p->{tags} = '';
    $p->{plan_parsed} = 0;
    $p->{plan} = '';
    $p->{objective} = '';
    $p->{level} = '';

    if (defined($attrs{level}))
    {
        $p->{level} = $attrs{level};
    }

    if ($e eq "pkg" || $e eq "session" ||
        $e eq "test")
    {
        push(@cur_nodes, $e);

        if ($e ne "session")
        {
            push(@cur_path, $attrs{name});
        }
        push(@iters_stack, $cur_iter);

        $cur_iter = {};
        $cur_iter->{name} = $attrs{name};
        $cur_iter->{path} = [];
        push(@{$cur_iter->{path}}, @cur_path);
        $cur_iter->{path_str} = join("/", @cur_path);

        $cur_iter->{hash} = "";
        $cur_iter->{tin} = -1;
        $cur_iter->{test_id} = -1;
        $cur_iter->{plan_id} = -1;
        $cur_iter->{err} = "";
        $cur_iter->{objective} = "";
        $cur_iter->{iters} = [];
        $cur_iter->{type} = $e;
        $cur_iter->{obtained} = {};

        if (defined($attrs{hash}))
        {
            $cur_iter->{hash} = $attrs{hash};
        }
        if (defined($attrs{tin}))
        {
            $cur_iter->{tin} = int($attrs{tin});
        }
        if (defined($attrs{test_id}))
        {
            $cur_iter->{test_id} = int($attrs{test_id});
        }
        if (defined($attrs{plan_id}))
        {
            $cur_iter->{plan_id} = int($attrs{plan_id});
        }
        if (defined($attrs{result}))
        {
            $cur_iter->{obtained}->{status} = $attrs{result};
        }
        if (defined($attrs{err}))
        {
            $cur_iter->{err} = $attrs{err};
        }

        $cur_iter->{params} = {};
        $cur_iter->{reqs} = [];
    }
    elsif ($e eq "param")
    {
        $cur_iter->{params}->{$attrs{name}} = $attrs{value};
    }
    elsif ($e eq "req")
    {
        push(@{$cur_iter->{reqs}}, $attrs{id});
    }
    elsif ($e eq "msg")
    {
        $tester_msg_parsed = 0;

        if ($attrs{entity} eq "Tester" &&
            $attrs{user} eq "Run")
        {
            $tester_msg = [];
            $cur_tester_msg = '';
            $tester_msg_parsed = 1;
        }

        if (($attrs{entity} eq "Dispatcher" ||
             $attrs{entity} eq "Tester") &&
            $attrs{user} eq "TRC tags")
        {
            $p->{tags_parsed} = 1;
        }

        if ($attrs{entity} eq "Tester" &&
            $attrs{user} eq "Execution Plan")
        {
            $p->{plan_parsed} = 1;
        }

        if (defined($attrs{ts_val}))
        {
            $base_tv = int($attrs{ts_val});
            $base_date = strftime("%Y.%m.%d", localtime($base_tv));
        }
    }
    elsif ($e eq "br")
    {
        if ($tester_msg_parsed)
        {
            push(@{$tester_msg}, $cur_tester_msg);
            $cur_tester_msg = '';
        }
    }
}

sub handle_char
{
    my ($p, $str) = @_;
    my $cur_elm = $p->current_element();

    if (defined($cur_elm))
    {
        if ($cur_elm eq "start-ts")
        {
            $p->{start_ts} .= $str;
        }
        elsif ($cur_elm eq "end-ts")
        {
            $p->{end_ts} .= $str;
        }
        elsif ($cur_elm eq "duration")
        {
            $p->{duration} .= $str;
        }
        elsif ($cur_elm eq "objective")
        {
            if ($p->{objective} eq '')
            {
                $p->{objective} .= $str;
            }
            else
            {
                $p->{objective} .= "\n";
                $p->{objective} .= $str;
            }
        }
        elsif ($cur_elm eq "verdict")
        {
            # save the verdict passed directly as tags,
            # because there might not be a recap in the last tag of the test
            $p->{verdict} .= $str;
        }
        elsif ($cur_elm eq "artifact")
        {
            $p->{artifact} .= $str;
        }
        elsif ($cur_elm eq "msg")
        {
            if ($tester_msg_parsed)
            {
                # We cannot cache the expectation/verdicts as done above
                # because it contains raw <br> tags.
                #
                # It messes with the parser, which generates a new event
                # every time, preventing us from accessing the data in the
                # "end" handler.
                $cur_tester_msg .= $str;
            }
        }
    }

    if ($p->{tags_parsed})
    {
        $p->{tags} .= $str;
    }

    if ($p->{plan_parsed})
    {
        $p->{plan} .= $str;
    }
}

sub get_unix_date
{
    my $time = $_[0];
    my $unix_date = $base_tv;

    if ($time =~ /([0-9]+):([0-9]+):([0-9]+)/)
    {
        my $time_in_sec = $1 * 60 * 60 + $2 * 60 + $3;
        my $day_in_sec = 24 * 60 * 60;

        # update the UNIX date according to the time
        my $day_start = $base_tv - ($base_tv % $day_in_sec);
        $unix_date = $day_start + $time_in_sec;

        # add 1 day to the UNIX date if the time is less than the base time
        if ($base_tv % $day_in_sec > $time_in_sec)
        {
            $unix_date += $day_in_sec;
        }
    }

    return $unix_date;
}

sub parse_datetime
{
    my $str = $_[0];
    my $time = str2time($str);

    if ($str =~ /[0-9]\.([0-9]*)$/)
    {
        $time = $time + "0.$1";
    }

    return $time;
}

sub update_last_time
{
    my ($last_time, $new_time) = @_;

    return $new_time if (not $last_time);

    my $last_parsed = parse_datetime($last_time);
    my $new_parsed = parse_datetime($new_time);

    if ($last_parsed > $new_parsed)
    {
        return $last_time;
    }
    else
    {
        return $new_time;
    }
}

sub fix_start
{
    my $start_time = $_[0];
    my $unix_start_date = get_unix_date($start_time);
    my $start_date = strftime("%Y.%m.%d",
                                 localtime($unix_start_date));

    return $start_date." ".$start_time;
}

sub fix_end
{
    my $start_time = $_[0];
    my $end_time = $_[1];
    my $duration = $_[2];

    my $unix_start_date = get_unix_date($start_time);
    my $unix_end_date = $unix_start_date;
    if ($duration =~ /([0-9]+):([0-9]+):([0-9]+)/)
    {
        my $duration_in_sec = $1 * 60 * 60 + $2 * 60 + $3;
        $unix_end_date = $unix_start_date + $duration_in_sec;
    }

    my $end_date = strftime("%Y.%m.%d",
                                 localtime($unix_end_date));

    return $end_date." ".$end_time;
}

sub parse_tags
{
    my $tags = $_[0];

    if ($tags =~ /^\s*{/)
    {
        # TRC tags in JSON format
        my $parsed_tags = from_json($tags);

        foreach my $tag (@{$parsed_tags->{tags}})
        {
            $parsed_data->{tags}->{$tag->{name}} = $tag->{value};
        }
    }
    else
    {
        # TRC tags in plain text
        foreach my $tag (split(/\s+/, $tags))
        {
            if ($tag ne '')
            {
                my $name = "";
                my $value = "";

                ($name, $value) = split(/:/, $tag);
                $parsed_data->{tags}->{$name} = $value;
            }
        }
    }
}

sub parse_plan
{
    my $plan = $_[0];
    my $plan_info = from_json($plan);
    if ($plan_info->{version} >= 1)
    {
        $parsed_data->{plan} = $plan_info->{plan};
    }
}

sub handle_end
{
    my ($p, $e) = @_;

    if ($e eq "start-ts")
    {
        $cur_iter->{start_ts} = $p->{start_ts};
    }
    elsif ($e eq "end-ts")
    {
        $cur_iter->{end_ts} = $p->{end_ts};
    }
    elsif ($e eq "duration")
    {
        $cur_iter->{end_ts} = fix_end($cur_iter->{start_ts}, $cur_iter->{end_ts}, $p->{duration});
        $last_ts = update_last_time($last_ts, $cur_iter->{end_ts});
        $cur_iter->{start_ts} = fix_start($cur_iter->{start_ts});
        if ($first_ts eq '')
        {
            $first_ts = $cur_iter->{start_ts};
        }
    }
    elsif ($e eq "objective")
    {
        $cur_iter->{objective} = $p->{objective};
        $p->{objective} = '';
    }
    elsif ($e eq "verdict")
    {
        my $result = $cur_iter->{obtained};

        if (not exists($result->{verdicts}))
        {
            $result->{verdicts} = [];
        }

        push(@{$result->{verdicts}}, $p->{verdict});
    }
    elsif ($e eq "artifact")
    {
        if ($p->{level} eq "MI")
        {
            # MI artifact.
            if (not exists($cur_iter->{measurements}))
            {
                $cur_iter->{measurements} = [];
            }
            push(@{$cur_iter->{measurements}}, from_json($p->{artifact}));
        }
        else
        {
            my $result = $cur_iter->{obtained};

            if (not exists($result->{artifacts}))
            {
                $result->{artifacts} = [];
            }

            push(@{$result->{artifacts}}, $p->{artifact});
        }
    }
    elsif ($e eq "msg")
    {
        if ($tester_msg_parsed)
        {
            push(@{$tester_msg}, $cur_tester_msg);

            my ($obtained, $expected) = parse_tester_end_msg($tester_msg);

            if (%$obtained)
            {
                $cur_iter->{obtained} = $obtained;
            }
            if (%$expected)
            {
                $cur_iter->{expected} = $expected;
            }

            $tester_msg = [];
            $cur_tester_msg = '';
        }
    }

    if ($e eq "pkg" || $e eq "session" ||
        $e eq "test")
    {
        my $parent_iter;

        pop(@cur_nodes);

        fix_results($cur_iter);
        $parent_iter = pop(@iters_stack);
        push(@{$parent_iter->{iters}}, $cur_iter);
        $cur_iter = $parent_iter;

        if ($e ne "session")
        {
            pop(@cur_path);
        }
    }

    if ($p->{tags_parsed})
    {
        parse_tags($p->{tags});
    }

    if ($p->{plan_parsed})
    {
        parse_plan($p->{plan});
    }
}

sub parse_xml_log
{
    my $fname = $_[0];

    $cur_iter = $parsed_data;
    $parser->parsefile($fname);
    $parsed_data->{start_ts} = $first_ts;
    $parsed_data->{end_ts} = $last_ts;
}

my $fname = $ARGV[0];

parse_xml_log($fname);
print to_json($parsed_data, { ascii => 1, pretty => 1 });
