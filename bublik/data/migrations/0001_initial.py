# Generated by Django 5.1.7 on 2025-05-14 13:16

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="EndpointURL",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(help_text="Timestamp of the short URL creation."),
                ),
                ("view", models.TextField(help_text="The Bublik URL view.")),
                (
                    "endpoint",
                    models.TextField(blank=True, help_text="The Bublik URL endpoint."),
                ),
                (
                    "hash",
                    models.CharField(
                        help_text="The Bublik URL endpoint hash.", max_length=16, unique=True
                    ),
                ),
            ],
            options={
                "db_table": "bublik_endpoint_url",
            },
        ),
        migrations.CreateModel(
            name="EventLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The start timestamp of the event."
                    ),
                ),
                (
                    "facility",
                    models.CharField(
                        choices=[
                            ("importruns", "Importruns"),
                            ("meta_categorization", "Meta Categorization"),
                            ("add_tags", "Add Tags"),
                            ("celery", "Celery"),
                        ],
                        help_text="The facility that the event is created by.",
                        max_length=64,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Info"),
                            ("err", "Err"),
                            ("warning", "Warning"),
                            ("debug", "Debug"),
                        ],
                        help_text="The severity of the event.",
                        max_length=64,
                    ),
                ),
                (
                    "msg",
                    models.TextField(
                        help_text="The message forwarded from facility.", null=True
                    ),
                ),
            ],
            options={
                "db_table": "bublik_eventlog",
            },
        ),
        migrations.CreateModel(
            name="Expectation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "hash",
                    models.CharField(
                        help_text="Hash of expect metas pointing to this expectation",
                        max_length=64,
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "bublik_expectation",
            },
        ),
        migrations.CreateModel(
            name="TestArgument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.TextField(help_text="The argument name.")),
                ("value", models.TextField(blank=True, help_text="The argument value.")),
                (
                    "hash",
                    models.CharField(
                        help_text="Name and value hash.", max_length=64, unique=True
                    ),
                ),
            ],
            options={
                "db_table": "bublik_testargument",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Email address"
                    ),
                ),
                (
                    "roles",
                    models.CharField(
                        choices=[("admin", "Admin"), ("user", "User")],
                        default="user",
                        max_length=64,
                        verbose_name="User roles",
                    ),
                ),
                ("first_name", models.CharField(max_length=64, verbose_name="First name")),
                ("last_name", models.CharField(max_length=64, verbose_name="Last name")),
                ("is_system", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_user",
            },
        ),
        migrations.CreateModel(
            name="Meta",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="The meta name.", max_length=64, null=True),
                ),
                (
                    "type",
                    models.CharField(
                        db_index=True,
                        help_text="The meta type, enumeration: result, verdict, note, error, tag, label, revision, branch, repo, log, import, count, objective, comment.",
                        max_length=64,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        blank=True, help_text="The meta value or none.", null=True
                    ),
                ),
                (
                    "hash",
                    models.CharField(
                        help_text="Name, type and value hash", max_length=64, unique=True
                    ),
                ),
                ("comment", models.TextField(help_text="A human written comment.", null=True)),
            ],
            options={
                "db_table": "bublik_meta",
                "indexes": [
                    models.Index(
                        fields=["type", "name", "value"], name="bublik_meta_type_344f41_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Measurement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "hash",
                    models.CharField(
                        help_text="Hash by hash_salt and all Meta fields", max_length=64
                    ),
                ),
                (
                    "metas",
                    models.ManyToManyField(
                        help_text="A metadata identifier.",
                        related_name="measurements",
                        to="data.meta",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_measurement",
            },
        ),
        migrations.CreateModel(
            name="MetaCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the category.", max_length=64, unique=True
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=4,
                        help_text="Priority assigned to the metas(tags) within the category.",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        help_text="User-defined notes about the category.", null=True
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        help_text="The meta type, enumeration: result, verdict, note, error, tag, label, revision, branch, repo, log, import, count, objective.",
                        max_length=64,
                    ),
                ),
                (
                    "metas",
                    models.ManyToManyField(
                        help_text="Meta instances belonging to its category.",
                        related_name="category",
                        to="data.meta",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_metacategory",
            },
        ),
        migrations.CreateModel(
            name="MetaPattern",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "pattern",
                    models.CharField(
                        help_text="Regular expression pattern that classifies a meta.",
                        max_length=256,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Category to which a meta resolves.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pattern",
                        to="data.metacategory",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_metapattern",
            },
        ),
        migrations.CreateModel(
            name="Reference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(help_text="The reference type name.", max_length=64)),
                (
                    "uri",
                    models.TextField(
                        help_text="The reference prefix or URI, e.g. https://site.com/path/to/logs,\nhttps://bugzilla.somebody.com/).",
                        max_length=128,
                    ),
                ),
            ],
            options={
                "db_table": "bublik_reference",
                "unique_together": {("name", "uri")},
            },
        ),
        migrations.CreateModel(
            name="ExpectMeta",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "serial",
                    models.IntegerField(
                        default=0,
                        help_text="Serial number of a meta result, can be used to determine verdicts order.",
                    ),
                ),
                (
                    "expectation",
                    models.ForeignKey(
                        help_text="Expectation instance.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.expectation",
                    ),
                ),
                (
                    "meta",
                    models.ForeignKey(
                        help_text="A metadata identifier.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.meta",
                    ),
                ),
                (
                    "reference",
                    models.ForeignKey(
                        help_text="A reference identifier.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.reference",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_expectmeta",
            },
        ),
        migrations.CreateModel(
            name="Test",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(help_text="The test name", max_length=64)),
                (
                    "result_type",
                    models.CharField(
                        choices=[("T", "test"), ("S", "session"), ("P", "pkg")],
                        default="T",
                        help_text="It distinguishes packages, sessions and tests from each other",
                        max_length=1,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        help_text="    A parent test (package) identifier - can be used to reassemble the test path.\n    Note! This path does not include the test and package arguments, it represents\n    only packages path like 'package1/package2/package3/test'.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.test",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_test",
                "unique_together": {("name", "parent")},
            },
        ),
        migrations.CreateModel(
            name="MetaTest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(help_text="Timestamp of the connection creation."),
                ),
                (
                    "serial",
                    models.IntegerField(
                        default=0,
                        help_text="The serial number is used to determine the order of comments.",
                    ),
                ),
                (
                    "meta",
                    models.ForeignKey(
                        help_text="A metadata identifier.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.meta",
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        help_text="The test identifier.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.test",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_metatest",
            },
        ),
        migrations.CreateModel(
            name="TestIteration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("hash", models.CharField(help_text="Hash", max_length=64, null=True)),
                (
                    "test",
                    models.ForeignKey(
                        help_text="The test identifier.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.test",
                    ),
                ),
                (
                    "test_arguments",
                    models.ManyToManyField(
                        help_text="The test arguments.",
                        related_name="test_iterations",
                        to="data.testargument",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_testiteration",
            },
        ),
        migrations.CreateModel(
            name="TestIterationResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "tin",
                    models.IntegerField(
                        help_text="The test iteration identifier (TIN) which is generated during the testing.",
                        null=True,
                    ),
                ),
                (
                    "exec_seqno",
                    models.IntegerField(
                        help_text="The execution sequence number (the actual test ID) which is generated during the testing.",
                        null=True,
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Timestamp of the iteration (or test run) execution start.",
                    ),
                ),
                (
                    "finish",
                    models.DateTimeField(
                        help_text="Timestamp of the iteration (or test run) execution end.",
                        null=True,
                    ),
                ),
                (
                    "iteration",
                    models.ForeignKey(
                        help_text="The test iteration identifier or none.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.testiteration",
                    ),
                ),
                (
                    "parent_package",
                    models.ForeignKey(
                        help_text="Parent package to which the iteration belongs",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="data.testiterationresult",
                    ),
                ),
                (
                    "test_run",
                    models.ForeignKey(
                        help_text="Reference to the test run.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.testiterationresult",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_testiterationresult",
            },
        ),
        migrations.CreateModel(
            name="MetaResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "ref_index",
                    models.IntegerField(
                        help_text="A reference index, can be used for example to specify a line in the log.",
                        null=True,
                    ),
                ),
                (
                    "serial",
                    models.IntegerField(
                        default=0,
                        help_text="Serial number of a meta result, can be used to determine verdicts order.",
                    ),
                ),
                (
                    "meta",
                    models.ForeignKey(
                        help_text="A metadata identifier.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.meta",
                    ),
                ),
                (
                    "reference",
                    models.ForeignKey(
                        help_text="A reference identifier.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.reference",
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(
                        help_text="The test iteration result identifier.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meta_results",
                        to="data.testiterationresult",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_metaresult",
            },
        ),
        migrations.CreateModel(
            name="MeasurementResultList",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "value",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        help_text="The measurement values of the result",
                        size=None,
                    ),
                ),
                (
                    "serial",
                    models.IntegerField(
                        default=0,
                        help_text="Serial number can be used to determine results order",
                    ),
                ),
                (
                    "measurement",
                    models.ForeignKey(
                        help_text="The measurement characteristics.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.measurement",
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(
                        help_text="The test iteration result which is measured.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.testiterationresult",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_measurementresultlist",
            },
        ),
        migrations.CreateModel(
            name="MeasurementResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("value", models.FloatField(help_text="The measurement value of the result")),
                (
                    "serial",
                    models.IntegerField(
                        default=0,
                        help_text="Serial number can be used to determine results order.",
                    ),
                ),
                (
                    "measurement",
                    models.ForeignKey(
                        help_text="The measurement characteristics.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="measurement_results",
                        to="data.measurement",
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(
                        help_text="The test iteration result which is measured.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="measurement_results",
                        to="data.testiterationresult",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_measurementresult",
            },
        ),
        migrations.AddField(
            model_name="expectation",
            name="results",
            field=models.ManyToManyField(
                help_text="Associated test iteration results.",
                related_name="expectations",
                to="data.testiterationresult",
            ),
        ),
        migrations.CreateModel(
            name="View",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "hash",
                    models.CharField(
                        help_text="Hash by hash_salt and all Meta fields", max_length=64
                    ),
                ),
                (
                    "metas",
                    models.ManyToManyField(
                        help_text="A metadata identifier", related_name="views", to="data.meta"
                    ),
                ),
            ],
            options={
                "db_table": "bublik_view",
            },
        ),
        migrations.CreateModel(
            name="ChartView",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("X", "axis_x"), ("Y", "axis_y"), ("P", "point")],
                        default="P",
                        max_length=1,
                    ),
                ),
                (
                    "measurement",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chart_views",
                        to="data.measurement",
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(
                        help_text="The test iteration result which is viewed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chart_views",
                        to="data.testiterationresult",
                    ),
                ),
                (
                    "view",
                    models.ForeignKey(
                        help_text="The view characteristics identifier",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chart_views",
                        to="data.view",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_chartview",
            },
        ),
        migrations.CreateModel(
            name="Config",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(help_text="Timestamp of the config creation."),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("global", "Global"),
                            ("report", "Report"),
                            ("schedule", "Schedule"),
                        ],
                        help_text="Configuration type.",
                        max_length=16,
                    ),
                ),
                ("name", models.TextField(help_text="Configuration name.", max_length=32)),
                ("version", models.IntegerField(default=0, help_text="Configuration version.")),
                ("is_active", models.BooleanField()),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the configuration."),
                ),
                ("content", models.JSONField(help_text="Configuration data.")),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user who created the configuration object.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="config",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "bublik_config",
                "unique_together": {("type", "name", "version")},
            },
        ),
        migrations.CreateModel(
            name="TestIterationRelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("depth", models.IntegerField(help_text="The parent depth.")),
                (
                    "parent_iteration",
                    models.ForeignKey(
                        help_text="A parent iteration identifier.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_relations",
                        to="data.testiteration",
                    ),
                ),
                (
                    "test_iteration",
                    models.ForeignKey(
                        help_text="The test iteration identifier.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parent_relations",
                        to="data.testiteration",
                    ),
                ),
            ],
            options={
                "db_table": "bublik_testiterationrelation",
                "unique_together": {("test_iteration", "depth")},
            },
        ),
    ]
